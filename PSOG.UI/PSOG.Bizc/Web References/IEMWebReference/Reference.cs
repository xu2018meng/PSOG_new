//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.5485 版自动生成。
// 
#pragma warning disable 1591

namespace PSOG.Bizc.IEMWebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IEMWebServiceSoap", Namespace="http://www.crtsoft.com/")]
    public partial class IEMWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateModelTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback StaticsWarningModelListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TStaticsModelInfoListOperationCompleted;
        
        private System.Threading.SendOrPostCallback StaticsModelInfoListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelStatisticsByDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback TStaticsDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback StaticsDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTagDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelDataByTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRountByDesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageUrl1ByDesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentModelAlarmInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IEMWebService() {
            this.Url = global::PSOG.Bizc.Properties.Settings.Default.PSOG_Bizc_IEMWebReference_IEMWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateTreeCompletedEventHandler CreateTreeCompleted;
        
        /// <remarks/>
        public event CreateModelTreeCompletedEventHandler CreateModelTreeCompleted;
        
        /// <remarks/>
        public event StaticsWarningModelListCompletedEventHandler StaticsWarningModelListCompleted;
        
        /// <remarks/>
        public event TStaticsModelInfoListCompletedEventHandler TStaticsModelInfoListCompleted;
        
        /// <remarks/>
        public event StaticsModelInfoListCompletedEventHandler StaticsModelInfoListCompleted;
        
        /// <remarks/>
        public event GetModelDataSetCompletedEventHandler GetModelDataSetCompleted;
        
        /// <remarks/>
        public event GetModelStatisticsByDayCompletedEventHandler GetModelStatisticsByDayCompleted;
        
        /// <remarks/>
        public event TStaticsDeviceInfoCompletedEventHandler TStaticsDeviceInfoCompleted;
        
        /// <remarks/>
        public event StaticsDeviceInfoCompletedEventHandler StaticsDeviceInfoCompleted;
        
        /// <remarks/>
        public event GetTagDataSetCompletedEventHandler GetTagDataSetCompleted;
        
        /// <remarks/>
        public event GetModelDataByTimeCompletedEventHandler GetModelDataByTimeCompleted;
        
        /// <remarks/>
        public event GetRountByDesCompletedEventHandler GetRountByDesCompleted;
        
        /// <remarks/>
        public event GetPageUrl1ByDesCompletedEventHandler GetPageUrl1ByDesCompleted;
        
        /// <remarks/>
        public event GetCurrentModelAlarmInfoCompletedEventHandler GetCurrentModelAlarmInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/CreateTree", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateTree(string UserName, string UserType, out string ErrorCode) {
            object[] results = this.Invoke("CreateTree", new object[] {
                        UserName,
                        UserType});
            ErrorCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTreeAsync(string UserName, string UserType) {
            this.CreateTreeAsync(UserName, UserType, null);
        }
        
        /// <remarks/>
        public void CreateTreeAsync(string UserName, string UserType, object userState) {
            if ((this.CreateTreeOperationCompleted == null)) {
                this.CreateTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTreeOperationCompleted);
            }
            this.InvokeAsync("CreateTree", new object[] {
                        UserName,
                        UserType}, this.CreateTreeOperationCompleted, userState);
        }
        
        private void OnCreateTreeOperationCompleted(object arg) {
            if ((this.CreateTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTreeCompleted(this, new CreateTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/CreateModelTree", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateModelTree(string UserName, string UserType, string TreeRoot) {
            object[] results = this.Invoke("CreateModelTree", new object[] {
                        UserName,
                        UserType,
                        TreeRoot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateModelTreeAsync(string UserName, string UserType, string TreeRoot) {
            this.CreateModelTreeAsync(UserName, UserType, TreeRoot, null);
        }
        
        /// <remarks/>
        public void CreateModelTreeAsync(string UserName, string UserType, string TreeRoot, object userState) {
            if ((this.CreateModelTreeOperationCompleted == null)) {
                this.CreateModelTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateModelTreeOperationCompleted);
            }
            this.InvokeAsync("CreateModelTree", new object[] {
                        UserName,
                        UserType,
                        TreeRoot}, this.CreateModelTreeOperationCompleted, userState);
        }
        
        private void OnCreateModelTreeOperationCompleted(object arg) {
            if ((this.CreateModelTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateModelTreeCompleted(this, new CreateModelTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/StaticsWarningModelList", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StaticsWarningModelList(string UserName, string UserType, string Route, string StartTime, string EndTime, bool EmptyIgnore) {
            object[] results = this.Invoke("StaticsWarningModelList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime,
                        EmptyIgnore});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StaticsWarningModelListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, bool EmptyIgnore) {
            this.StaticsWarningModelListAsync(UserName, UserType, Route, StartTime, EndTime, EmptyIgnore, null);
        }
        
        /// <remarks/>
        public void StaticsWarningModelListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, bool EmptyIgnore, object userState) {
            if ((this.StaticsWarningModelListOperationCompleted == null)) {
                this.StaticsWarningModelListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStaticsWarningModelListOperationCompleted);
            }
            this.InvokeAsync("StaticsWarningModelList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime,
                        EmptyIgnore}, this.StaticsWarningModelListOperationCompleted, userState);
        }
        
        private void OnStaticsWarningModelListOperationCompleted(object arg) {
            if ((this.StaticsWarningModelListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StaticsWarningModelListCompleted(this, new StaticsWarningModelListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/TStaticsModelInfoList", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TStaticsModelInfoList(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("TStaticsModelInfoList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TStaticsModelInfoListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.TStaticsModelInfoListAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void TStaticsModelInfoListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.TStaticsModelInfoListOperationCompleted == null)) {
                this.TStaticsModelInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTStaticsModelInfoListOperationCompleted);
            }
            this.InvokeAsync("TStaticsModelInfoList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.TStaticsModelInfoListOperationCompleted, userState);
        }
        
        private void OnTStaticsModelInfoListOperationCompleted(object arg) {
            if ((this.TStaticsModelInfoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TStaticsModelInfoListCompleted(this, new TStaticsModelInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/StaticsModelInfoList", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StaticsModelInfoList(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("StaticsModelInfoList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StaticsModelInfoListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.StaticsModelInfoListAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void StaticsModelInfoListAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.StaticsModelInfoListOperationCompleted == null)) {
                this.StaticsModelInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStaticsModelInfoListOperationCompleted);
            }
            this.InvokeAsync("StaticsModelInfoList", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.StaticsModelInfoListOperationCompleted, userState);
        }
        
        private void OnStaticsModelInfoListOperationCompleted(object arg) {
            if ((this.StaticsModelInfoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StaticsModelInfoListCompleted(this, new StaticsModelInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetModelDataSet", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModelDataSet(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("GetModelDataSet", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModelDataSetAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.GetModelDataSetAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void GetModelDataSetAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.GetModelDataSetOperationCompleted == null)) {
                this.GetModelDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelDataSetOperationCompleted);
            }
            this.InvokeAsync("GetModelDataSet", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.GetModelDataSetOperationCompleted, userState);
        }
        
        private void OnGetModelDataSetOperationCompleted(object arg) {
            if ((this.GetModelDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelDataSetCompleted(this, new GetModelDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetModelStatisticsByDay", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModelStatisticsByDay(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("GetModelStatisticsByDay", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModelStatisticsByDayAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.GetModelStatisticsByDayAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void GetModelStatisticsByDayAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.GetModelStatisticsByDayOperationCompleted == null)) {
                this.GetModelStatisticsByDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelStatisticsByDayOperationCompleted);
            }
            this.InvokeAsync("GetModelStatisticsByDay", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.GetModelStatisticsByDayOperationCompleted, userState);
        }
        
        private void OnGetModelStatisticsByDayOperationCompleted(object arg) {
            if ((this.GetModelStatisticsByDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelStatisticsByDayCompleted(this, new GetModelStatisticsByDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/TStaticsDeviceInfo", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TStaticsDeviceInfo(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("TStaticsDeviceInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TStaticsDeviceInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.TStaticsDeviceInfoAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void TStaticsDeviceInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.TStaticsDeviceInfoOperationCompleted == null)) {
                this.TStaticsDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTStaticsDeviceInfoOperationCompleted);
            }
            this.InvokeAsync("TStaticsDeviceInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.TStaticsDeviceInfoOperationCompleted, userState);
        }
        
        private void OnTStaticsDeviceInfoOperationCompleted(object arg) {
            if ((this.TStaticsDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TStaticsDeviceInfoCompleted(this, new TStaticsDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/StaticsDeviceInfo", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StaticsDeviceInfo(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            object[] results = this.Invoke("StaticsDeviceInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StaticsDeviceInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime) {
            this.StaticsDeviceInfoAsync(UserName, UserType, Route, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void StaticsDeviceInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, object userState) {
            if ((this.StaticsDeviceInfoOperationCompleted == null)) {
                this.StaticsDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStaticsDeviceInfoOperationCompleted);
            }
            this.InvokeAsync("StaticsDeviceInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime}, this.StaticsDeviceInfoOperationCompleted, userState);
        }
        
        private void OnStaticsDeviceInfoOperationCompleted(object arg) {
            if ((this.StaticsDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StaticsDeviceInfoCompleted(this, new StaticsDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetTagDataSet", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTagDataSet(string UserName, string UserType, string Name, string StartTime, string EndTime) {
            object[] results = this.Invoke("GetTagDataSet", new object[] {
                        UserName,
                        UserType,
                        Name,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTagDataSetAsync(string UserName, string UserType, string Name, string StartTime, string EndTime) {
            this.GetTagDataSetAsync(UserName, UserType, Name, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void GetTagDataSetAsync(string UserName, string UserType, string Name, string StartTime, string EndTime, object userState) {
            if ((this.GetTagDataSetOperationCompleted == null)) {
                this.GetTagDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTagDataSetOperationCompleted);
            }
            this.InvokeAsync("GetTagDataSet", new object[] {
                        UserName,
                        UserType,
                        Name,
                        StartTime,
                        EndTime}, this.GetTagDataSetOperationCompleted, userState);
        }
        
        private void OnGetTagDataSetOperationCompleted(object arg) {
            if ((this.GetTagDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTagDataSetCompleted(this, new GetTagDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetModelDataByTime", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModelDataByTime(string UserName, string UserType, string Route, string Time, string Flag) {
            object[] results = this.Invoke("GetModelDataByTime", new object[] {
                        UserName,
                        UserType,
                        Route,
                        Time,
                        Flag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModelDataByTimeAsync(string UserName, string UserType, string Route, string Time, string Flag) {
            this.GetModelDataByTimeAsync(UserName, UserType, Route, Time, Flag, null);
        }
        
        /// <remarks/>
        public void GetModelDataByTimeAsync(string UserName, string UserType, string Route, string Time, string Flag, object userState) {
            if ((this.GetModelDataByTimeOperationCompleted == null)) {
                this.GetModelDataByTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelDataByTimeOperationCompleted);
            }
            this.InvokeAsync("GetModelDataByTime", new object[] {
                        UserName,
                        UserType,
                        Route,
                        Time,
                        Flag}, this.GetModelDataByTimeOperationCompleted, userState);
        }
        
        private void OnGetModelDataByTimeOperationCompleted(object arg) {
            if ((this.GetModelDataByTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelDataByTimeCompleted(this, new GetModelDataByTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetRountByDes", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRountByDes(string UserName, string UserType, string Des) {
            object[] results = this.Invoke("GetRountByDes", new object[] {
                        UserName,
                        UserType,
                        Des});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRountByDesAsync(string UserName, string UserType, string Des) {
            this.GetRountByDesAsync(UserName, UserType, Des, null);
        }
        
        /// <remarks/>
        public void GetRountByDesAsync(string UserName, string UserType, string Des, object userState) {
            if ((this.GetRountByDesOperationCompleted == null)) {
                this.GetRountByDesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRountByDesOperationCompleted);
            }
            this.InvokeAsync("GetRountByDes", new object[] {
                        UserName,
                        UserType,
                        Des}, this.GetRountByDesOperationCompleted, userState);
        }
        
        private void OnGetRountByDesOperationCompleted(object arg) {
            if ((this.GetRountByDesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRountByDesCompleted(this, new GetRountByDesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetPageUrl1ByDes", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPageUrl1ByDes(string UserName, string UserType, string ModelParam, string Type) {
            object[] results = this.Invoke("GetPageUrl1ByDes", new object[] {
                        UserName,
                        UserType,
                        ModelParam,
                        Type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPageUrl1ByDesAsync(string UserName, string UserType, string ModelParam, string Type) {
            this.GetPageUrl1ByDesAsync(UserName, UserType, ModelParam, Type, null);
        }
        
        /// <remarks/>
        public void GetPageUrl1ByDesAsync(string UserName, string UserType, string ModelParam, string Type, object userState) {
            if ((this.GetPageUrl1ByDesOperationCompleted == null)) {
                this.GetPageUrl1ByDesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageUrl1ByDesOperationCompleted);
            }
            this.InvokeAsync("GetPageUrl1ByDes", new object[] {
                        UserName,
                        UserType,
                        ModelParam,
                        Type}, this.GetPageUrl1ByDesOperationCompleted, userState);
        }
        
        private void OnGetPageUrl1ByDesOperationCompleted(object arg) {
            if ((this.GetPageUrl1ByDesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageUrl1ByDesCompleted(this, new GetPageUrl1ByDesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crtsoft.com/GetCurrentModelAlarmInfo", RequestNamespace="http://www.crtsoft.com/", ResponseNamespace="http://www.crtsoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentModelAlarmInfo(string UserName, string UserType, string Route, string StartTime, string EndTime, string Flag) {
            object[] results = this.Invoke("GetCurrentModelAlarmInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime,
                        Flag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentModelAlarmInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, string Flag) {
            this.GetCurrentModelAlarmInfoAsync(UserName, UserType, Route, StartTime, EndTime, Flag, null);
        }
        
        /// <remarks/>
        public void GetCurrentModelAlarmInfoAsync(string UserName, string UserType, string Route, string StartTime, string EndTime, string Flag, object userState) {
            if ((this.GetCurrentModelAlarmInfoOperationCompleted == null)) {
                this.GetCurrentModelAlarmInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentModelAlarmInfoOperationCompleted);
            }
            this.InvokeAsync("GetCurrentModelAlarmInfo", new object[] {
                        UserName,
                        UserType,
                        Route,
                        StartTime,
                        EndTime,
                        Flag}, this.GetCurrentModelAlarmInfoOperationCompleted, userState);
        }
        
        private void OnGetCurrentModelAlarmInfoOperationCompleted(object arg) {
            if ((this.GetCurrentModelAlarmInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentModelAlarmInfoCompleted(this, new GetCurrentModelAlarmInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void CreateTreeCompletedEventHandler(object sender, CreateTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void CreateModelTreeCompletedEventHandler(object sender, CreateModelTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateModelTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateModelTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void StaticsWarningModelListCompletedEventHandler(object sender, StaticsWarningModelListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaticsWarningModelListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StaticsWarningModelListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void TStaticsModelInfoListCompletedEventHandler(object sender, TStaticsModelInfoListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TStaticsModelInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TStaticsModelInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void StaticsModelInfoListCompletedEventHandler(object sender, StaticsModelInfoListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaticsModelInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StaticsModelInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetModelDataSetCompletedEventHandler(object sender, GetModelDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetModelStatisticsByDayCompletedEventHandler(object sender, GetModelStatisticsByDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelStatisticsByDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelStatisticsByDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void TStaticsDeviceInfoCompletedEventHandler(object sender, TStaticsDeviceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TStaticsDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TStaticsDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void StaticsDeviceInfoCompletedEventHandler(object sender, StaticsDeviceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaticsDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StaticsDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetTagDataSetCompletedEventHandler(object sender, GetTagDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTagDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTagDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetModelDataByTimeCompletedEventHandler(object sender, GetModelDataByTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelDataByTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelDataByTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetRountByDesCompletedEventHandler(object sender, GetRountByDesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRountByDesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRountByDesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetPageUrl1ByDesCompletedEventHandler(object sender, GetPageUrl1ByDesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageUrl1ByDesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageUrl1ByDesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetCurrentModelAlarmInfoCompletedEventHandler(object sender, GetCurrentModelAlarmInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentModelAlarmInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentModelAlarmInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591